* 웹 페이지 개발 방법
1. 분리해서 코딩
  - 구조(Structure) : HTML
                     (화면에 담겨있어야하는 내용)
  - 표현(Presentation) : CSS
                        (디자인)
  - 동작(Behavior) : javascript


  * 내용 작성
    1. 이해하기 쉽게
    2. 논리적으로
    3. 의미있게
    4. 구조적으로
    5. ⭐콘텐트는 "제목+내용"으로 작성
        제목은 작성하고 css로 안보이게 할 수 있음.
        하지만 듣는 사람들에게는 들린다.
    6. ⭐디자인에는 없는 요소들도 내용 전달에 필요하면 추가 작성
    7. ⭐중요도, 선호도, 사용빈도가 높은 순으로


  * 코딩 순서
    1. 내용 작성                               ┬─ HTML ⭐
    2. 마크업 : 용도나 목적에 맞는 태그 작성    ┤
    3. 콘텐트 블럭                             ┘
    4. CSS 초기화                             ┬─ CSS
    5. CSS 작성                               ┘
    6. 스크립트 적용                          ── javascript
    7. 프로그래밍 적용
    8. 표준/접근성 검사
    9. 수정/보완

정보는 보는사람, 듣는사람 동일하게 얻을 수 있도록 작성
  ex) 로고 x // 한진 으로 작성한다.

Image Replacement : 본문상에서는 text로 보이는데 브라우저 상에서는 이미지로 보이게 하는 기술
                    ex) 네이버 로고

이미지로 삽입할 때 전달되는 내용이 어려우면,
쉽게 text로 바꿀 수 있다.


* 주요태그
1. meta
  -문서의 속성 정의
  -head 태그 내에 작성
2. title
  -문서의 제목 정의
  -head 태그 내에 작성
3. h(Heading)
  -제목 표시
  -h1(큰 제목) ~ h6(작은 제목)
  -줄 바꿈 + 볼드체 적용
4. p(paragraph)
  -문단 구분
5. br(break)
  -줄 바꿈
6. 목록 태그
  -ul(Unordered List : 비순차목록)
  =ol(Ordered List : 순차목록)
  -dl(Definition List : 정의목록)

  -li(List Item : ul, ol의 항목)

  -dt(Definition Term : 목록에 대한 정의)
  -dd(Definition Description : 정의 목록의 항목)
7. a(Anchor)
  -링크 생성
8. Img
  -웹 페이지에 이미지 불러오기
9. div
  -여러 개의 요소를 그룹화



header main footer는 제목태그를 포함하는것이 좋다가 권장사항이다.
footer에서는 h2로 footer 제목 사용하고 약관및 정책은 h3 사용한다.

콘텐트 블럭 - 제목과 내용이 있으면 하나로 묶어준다.


** HTML5에서 추가된 Section 요소 **
1. header
  -페이지의 독자적 요소
  -로고, 내비게이션
  -반드시 하나 이상의 제목(h1~h6) 명시
  -section, header, footer 태그 사용불가
  -요소의 위치 무관
2. article
  -페이지 내용상 별개의 내용을 구성할 때 사용되는 섹션
3. section
  -단락, 이미지, 제목 등의 콘텐트를 묶어 더 큰 논리적 단위
  -body 안에 들어 갈 수 있는 모든 요소 사용 (header, footer 포함)
  -class 나 id 속성을 사용하여 섹션에 대한 특정정보(메타데이터) 추가
4. main
  -문서의 주요 내용 정의(요소 내부의 내용은 문서에 공유)
  -문서 내에 한 번만 사용
  -article, aside, header, nav, footer 요소의 하위에 사용 불가
  -사이드 콘텐트, 저작권 정보, 사이트 로고, 검색 양식 등 모든 내용 포함 가능
5. nav
  -페이지 링크, 내부 링크가 있는 섹션 마크업 시 사용
  -메인 네이게이션이 있는 섹션에만 사용
6. aside
  -본문 내용에 대한 추가적인 설명, 부수적 콘텐트 표시에 사용하는 태그
7. footer
  -저작권, 개인정보 보호정책, 연락처 등의 콘텐트
  -문서상의 위치 무관
8. div

//한번만 사용하는 태그
  main h1 nav address

  header footer는 section이나 main안에 또 쓸 수 있음


  //예전에는 header도 div로 만듦
  //main을 담을 수 있는 태그 -> div
    div는 아무 의미가 없어서 아무거나 다 담을 수 있음

//header, main, footer는 id 기본으로 부여하고
  css 나중에 적용할거니까 class 부여



* css 초기화(reset) : 태그들이 가지고 있는 기본 속성과 값을 코딩하기 편한 값으로 변경
  배포된 리셋파일 종류들 많음
  다만 사용하더라도 우리꺼에 맞게 수정해야함.

  초기화 코드들 정리해두면 나중에 필요한것만 가져다가 쓸수있음
  //초기화코드 정리하기


-image replacement

-디자인에 보이지 않는 부분 감추기

콘텐츠 이미지를 <img> 사용해서 src, alt 사용해도 됨
  alt는 하단에 글 작성했으면 공란으로 두고,
  아니면 alt에 해당 글 내용을 넣음


코드를 짜서 포토샵이나 일러스트처럼 그림을 그리는 방법
  svg는 벡터방식
  canvas는 비트맵 방식


margin-top을 가지는 요소나
상위요소들 중에서 float, position:absolute fixed, 부모요소에 border-top이 있으면
bug적인 문제 없어짐

padding은 크기가 바뀔 수 있고, margin은 위치가 바뀔 수 있고.


이미지가 있고 텍스트가 있는 컨텐츠가 있으면
padding으로 텍스트 위치 조정


화면 너비에 맞추려면 기본적으로 박스 2개다.
화면 전체를 채워줄 박스 하나
그안에서 크기 고정해서 보여줄 박스 하나 필요함


name은 <form>에서 주로 사용
id는 표준접근성, javascript, html-header main footer에서 사용

float의 특성
자식들의 길이가 부모길이보다 크면 float 되지 않음
