*웹 브라우저 : 인터넷 화면을 보여주는 프로그램
  (ex : Chrome, Fire Fox, Safari, Opera, Explorer ...)
    많이 쓰는 브라우저 지정, 5대 브라우저 (다양한 환경에서 확인해 볼 필요가 있다.)
      저 5개의 이름이 중요하지않음. 
      왜 5대 브라우저가 생겼는지에 대한 근원이 중요함.

  내가 만든 화면이 다른 브라우저에서도 잘 보일 수 있도록 만들어야하는 의무가 있음
  이 과정을 'Cross Browsing' 이라고 함.

  >>웹을 만들면 크로스브라우징 꼭 해야함.


*HTML (Hyper Text Markup Language)
  :웹 페이지를 작성하는 언어

 웹 문서 / html 문서 / html 페이지


*웹 페이지 생성
  1. 저장할 때 확장자는 반드시 .html 또는 .htm
    (.htm은 이제 안씀)
  2. 가장 먼저 보여질 화면의 이름은 반드시 "index.html"
    공통적으로 생략해도 되는 태그를 지정해주고 있음 ->index라고 저장한건 이름 생략할 수 있다.

  맨 처음에 보이는 화면은 main page / 그 외에는 sub page 라고 부르지만
  main page -index.html / sub page -notice.html, event.html, map.html,... 라고 저장되야 된다.

  HTML 문서 필수요소
    <!DOCTYPE html>
    <html lang="ko">
    <meta charset="UTF-8">
    <title> </title>


*표준화 페이지 기본 형식 ⭐⭐⭐
  <!DOCTYPE html>
  <html lang="ko">
    <head>
      <meta charset="utf-8">
      <title>문서 제목</title>
    </head>

    <body>

    </body>
  </html>


  <!DOCTYPE html>               
          -Document Type (html 4.01, xhtml 1/0, html 5)
          -설명서 역할, 단 강제성이 없음. 그래서 크로스브라우징 해야함.
  <html lang="ko">                
          -기본언어 설정(이 화면에서는 이 언어를 기본으로 사용할거야.) 
          -Screen Reader(저시력자 분들) <-조만간 사라질 것으로 보임
            -JAWS/NVDA 
            -Sense
          -웹 표준 검사에서는 없어도 되지만, 웹 접근성에서는 필요함. (중요도: 웹 표준 << 웹 접근성)
            웹 접근성은 최악의 경우, 벌금형이 따라옴.
            웹 접근성 검사는 어떻게? 기관에 의뢰 -> KWCAG 2.1 (24가지의 검사항목)
   <head>
      <meta charset="utf-8">
          -어떤 글자를 사용하는지 명시 (언어와 문자는 다름)
          -character(=문자) + set
          -한글 깨지면 무조건 charset !!
          -"euc-kr" : 한글 문자 선언 값, 한글밖에 모르고 특수문자도 깨짐
                     저장할 때 인코딩을 ANSI로 하면 한글이 깨지지 않음
          -선언 값과 저장 값이 상이하면 언어가 깨짐 (원인은 오직 여기 !)
          -문서에 작성한 형식과 저장한 형식이 다르면 생기는 문제.
          -현재 전 세계적으로 charset은 하나밖에 안씀 ->> UTF-8 (원래 사람이 쓰던 언어가 아닌 장치들이 쓰던 언어임)
                                                         모든 언어를 다 알고 있음
      <title>문서 제목</title>
          -Browser나 Screen Reader가 가장 먼저 읽어주는 부분이기 때문에 그 페이지의 키워드를 써주는게 필요하다.
          -보통 Sub page의 내용과 title은 거의 똑같음
          -Main page는 내용이 다양하니까 회사이름, 브랜드 이름 쓰면 됨
    </head>

    <body>

    </body>
  </html>


*HTML
  1. "<"와 ">" 사이에 명령어(tag, element) 작성
    이스케이프 문자 (entity type)
      &nbsp; : 띄어쓰기 / non-breaking spacing (줄 바꾸지말고 간격을 만들어.)

  2. 시작태그와 종료태그로 구성

  3. 태그는 중첩 가능하면 종료태그는 나중에 작성한 태그먼저 작성
    -<div><p><a></div></p></a>    (x)
    -<div><p><a></a></p></div>    (o)

  4. 종료태그가 없거나 생략 가능한 태그
    -종료태그가 없는 태그 : br, img, hr, meta, input,...
    -종료태그가 생략 가능한 태그 : 주석, p, option,...

  5. 반드시 종료 선언(xhtml)
    -종료태그가 없는 태그 : 태그 뒤에 "/" 표기
      ex) <br> ---------------------> <br />
          <img src=""> -------------> <img src="" />
    -종료태그 생략 가능한 태그 : 반드시 종료태그 작성

    xhtml에서는 무조건 닫아.

    xhtml은 html5를 발표한 이 후 사용되지 않음.
    하지만 실무에 갔을 때 이미 만들어진 것을 유지, 보수 할 수 있음

    ex) NAVER 페이지 소스에서 meta 태그 끝에 /가 있는 경우는 
        xhtml 시절에 만들어져서 남아있는 것. html5에서 안고쳐도 되니까.

        <meta property="og:title" content="네이버">
          og : open graphic tag / 문자나 카톡으로 사이트 주소를 보낼 때 이미지, 제목, 주소가 출력됨.

  6. 디버깅을 하지 않음
    잘못된 부분이 있어도 알려주지 않음.
    정확하게 알고 쓰는게 중요하다.

  7. 반드시 대소문자 구분(xhtml)
    -모든 태그와 속성은 소문자로만 작성

  8. 문서 상단에 반드시 DOCTYPE 선언


*태그의 형식
  <명령어 속성 = "속성값">
  
  <tag     property  = "value">
  <element attribute = "value">
  
  <a href="http://naver.com">네이버</a>


*속성의 특징
  1. 태그와 속성, 속성과 속성은 공백으로 구분
    ex) <a href="#">    <o>
        <ahref="#">     <x>

  2. 여러 개의 속성을 사용할 수 있지만(A)
    ex) A : <img src="/" width="길이" height="높이">    <o>
        
     같은 속성을 두 번 이상 사용 불가(B)
    ex) B : <img src="/" width="300" width="400">       <x>

  3. 하나의 속성에는 값을 한 개만 지정
    ex) <img src="/" width="300, 400">                  <x>

  4. 속성값은 원래의 이름이 한글인 경우를 제외하고 한글 사용 불가
    ex) <img width="300">     <o>
        <img width="삼백">    <x>

    예외 태그 : meta
      <meta name="keywords" content="영화, 한국영화, 외국영화">
      앞(name)에서는 질문을 하고 뒤(content)가 답하는 구조
      -name : 이 페이지에서 어떤 keywords가 검색될 건지 

  5. 속성값에는 " " 생략가능 (xhtml에서는 생략 불가)
    생략가능하지만 생략하지 마라.


웹접근성연구소(https://www.wah.or.kr:444/index.asp)에서
한국성 웹 콘텐츠 접근성 지침 2.1 (KWCAG 2.1) 24page 보면 검사항목 24개 볼 수 있다.

  콘텐츠 간의 구분 : 배경색, 테두리, 여백

  6.4.2. (제목 제공) 페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공해야 한다.
    페이지 : <title>
    프레임 : <frame title=" ">
    콘텐츠 블록 : <h1> ~ <6>

  ⭐7.1.1. (기본 언어 표시) 주로 사용하는 언어를 명시해야 한다.
    웹 표준성에서는 검사 안 하지만 접근성에서는 검사한다. 

    8.2.1. (웹 애플리케이션 접근성 준수) 콘텐츠에 포함된 웹 애플리케이션은 접근성이 있어야 한다.
      Youtube 에서 공유누르면 링크 가져올 수 있음
      ex) <iframe width="560" height="315" src="https://www.youtube.com/embed/6QcTHBJv_pE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        iframe은 웹 화면을 뚫어서 그 뒤에 있는 컨텐츠를 보이게 해주는 원리라고 생각하면 됨.
        iframe안에서 'tab' 눌렀는데 밖으로 못 빠져나온다? -> 접근성 위반

네이버 웹접근성 연구소 (https://nuli.navercorp.com/) : 기본 지침서 있음(코딩 컨벤션)


*주요 태그
  1. meta
    -문서의 속성 정의
      어떤 문자를 사용하는지, 검색했을 때 어떤 내용을 보여줄건지
    -head 태그 내에 작성

  2. title
    -문서의 제목 정의
    -head 태그 내에 작성

  3. h(Heading)
    -제목 표시
    -h1(큰 제목) ~ h6(작은 제목)
    -줄 바꿈 + 볼드체 적용

    장치들이 저게 제목이야 하고 이해할 수 있는 태그가 필요함.
    태그들 중에 유일하게 level이 있음

    h1은 가장 크기 때문에 상징성이 가장 큰 부분에서 사용한다. 
    여러번 써도 상관없지만 한 번만 사용하도록 한다.

    개발자도구 -윈도우기준(F12) / 마우스 오른쪽>검사

  4. p(Paragraph)
    -문단 구분

  5. br(Break)
    -줄 바꿈

  6. 목록 태그
    -ul(Unordered List : 비순차목록)
    -ol(Ordered List : 순차목록)
    -dl(Definition List : 정의목록)

    -li(List item : ul, ol의 항목)

    -dt(Definition Term : 목록에 대한 정의)
    -dd(Definition Description : 정의 목록의 항목)

  7. a(Anchor)
    -링크 생성

  8. img
    -웹 페이지에 이미지 불러오기

  9. div
    -여러 개의 요소를 그룹화


**웹 페이지 개발 방법**
  구분해서 작성
    1. 구조(structure) - 화면에 담겨있어야 하는 내용을 HTML로 만들어라
                         내용을 만드는게 구조인 것이고 구조를 만드는게 HTML의 역할

                         접근성은 장애인도 이용하기 위함임.

                         구조를 만들 때 영역을 크게 3가지로 나누더라.
                          header / content / footer

    2. 표현(presention) - 디자인이 되는 것, CSS로 만듦

    3. 동작(behavior) - 움직임을 담당, JAVASCRIPT


**레이아웃 기본 구조**
  1. header
    -상단 로고, GNB, topmenu 등
    -주로 페이지 안내(이동)에 관한 요소 포함
    -GNB : Global Navigation Bar - 메뉴바

  2. content(main)
    -페이지별 내용, LNB, 배너, 게시판, 퀵메뉴 등
    -해당 페이지에서 나타내고자 하는 내용 작성
    -LNB : Local Navigation Bar - 사이드 메뉴
           메인메뉴(대메뉴)에 포함된 하위메뉴(소메뉴)의 집합

  3. footer
    -회사나 사이트에 대한 정보
    -각종 연락처, 관리자 정보, 약관 및 정책, 카피라이트 등
     카피라이트는 우리가 보호받기 위한 것임. /그 앞에 있는 건 표시해야하는 의무

  4. 기타 요소(SNS, 검색, 관련 사이트 등)는 필요한 위치에 추가