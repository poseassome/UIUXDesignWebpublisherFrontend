** 연산자 **

  * 산술 연산자
    1. +
    2. -    (추가내용: 부호반전의 의미도 있음.)
    3. *    (추가내용: all의 의미도 있음.)
    4. /
    5. % : 두 개의 수를 나눈 나머지 (몫: 정수)
          10 / 3 = 3.333334
          10 % 3 = 1

          ex) a = 0 ~ 100
              a % 4       하면 0, 1, 2, 3 이 반복되어 나옴(순환로직)

         str   Num
    --------------
    일    o     x
     1    o     o


  * 연결 연산자
    1. + : 연산자의 좌변과 우변의 값이 산술연산이 불가능한 경우
           두 개의 값을 이어주는 연산자

           ex) 1 + 2 = 3     <-- 산술 연산이 가능하므로 "산술 연산자"
              "a" + 1 = a1   <-- 두 개의 값을 연결하는 "연결 연산자"


          js: var score = "100";
              document.write(score + " POINT");
              --> 100 POINT

          php: $score = 100;
               echo $score. " POINT"
               --> 100 POINT

          asp: dim score
               response.write

          c언어, java: int score (자료형을 쓰고 변수)
                       print(f)


  * 비교 연산자 : 결과값이 true / false로 출력
    1. >
    2. <
    3. == : "="는 저장의 의미, "=="는 비교의 의미
            === 도 있음 (세 개가 좀 더 정확함에 가깝다라는 뜻)

            ex) a = "1"

                a == 1  (true/false)  <-- 형식이 달라도 값이 같을 수 있음
                a === 1 (false)       <-- 값이랑 형식이 같아야 함
    4. <=
    5. >=
    6. != : ! = not, 다르다(같지않다)
            !true == false
            null <--> not null
                      !null
       a == b
       a != b

    !는 항상 앞에 =는 항상 뒤에

    비밀번호 재확인 입력창을 만들 때 활용 원리
      : a == b 가 false가 나온다? --> a와 b는 값이 다르다.


  * 논리 연산자
     좌변과 우변의 식을 검토하여 결과 산출
     (왼쪽이나 오른쪽에 Boolean형 data이거나 Boolean형이 나올 수 있는 식일 때)

    1. &&(and) : 좌변과 우변의 식이 모두 참인 경우에 참값 반환
    2. ||(or) : 좌변과 우변의 식 중 하나라도 참이면 참값 반환
    3. ^(Xor) : 좌변과 우변 중 하나만 참인 경우 참값 반환   <-- 실무에서 안씀
    4. !(not) : 반대 값 반환

         TT   TF   FT   FF
    ------------------------
    &&   T    F    F    F
    ||   T    T    T    F


  * 비트식 연산자
     논리 연산자와 같은 연산자이지만 연산 기호가 1개이고,
     값이 1(true), 0(false)로 출력


  * 대입 연산자
    1. "=" 기호가 들어간 연산식  (아래 ex) 양쪽 모두 대입 연산자임)
    2. 좌변과 우변에 동일식이 존재하는 경우 약식 가능

      ex) a = a + b  ---------->  a += b
          a = a - b  ---------->  a -= b
          a = a * b  ---------->  a *= b
          a = a / b  ---------->  a /= b
          a = a % b  ---------->  a %= b

    프로그래밍언어에서 equal sign이 있으면 뒤부터 본다.

          풀이_
          a += b 가 있으면,

          a = 10, b = 20 일 때
          a = a + b
          a = 10 + 20
          a = 30 이고, 이는 다음 연산에서 사용되는 a 값이다.


  * 증감 연산자
    1. 변수의 값을 증가 또는 감소시키는 연산자
    2. 연산기호 : ++, --
    3. 증감 범위 : +-1
    4. 선행처리(++a), 후행처리(a++)

    변수는 Number object여야만 한다.

    ex) a = 100
          a++ : 100+1, 101+1, 102+1, ...
          ++a : 101, 102, 103, ...

          a-- : 100-1, 99-1, 98-1, ...
          --a : 99, 98, 97, ...

    a = 1
    a++;    <--- a 값을 1 증가 시켜. (a = a + 1)로 표현할 수 있음.
    => a = 2

    두 번 증가시키려면?
    a++ 두 번 쓰면 된다.

    증감연산자 vs 대입연산자
      - a++ : 식이 짧지만 증감폭이 1로 제한적
      - a = a + 1 : 식이 길지만 증감폭 지정 가능

    게시판에 글번호에 증감 연산자 사용함.

    /예시는 다음시간에 제어문, 반복문 할 때 보도록 함.


  * 조건 연산자(삼항 연산자)
     조건의 결과에 따라 다른 값 출력
     (조건'문'에 가까움)

    1. (조건)?   조건이 참일 경우   :   조건이 거짓인 경우

    똑같은 조건이라도 실행되는 문장에 따라서 결과가 다르다.(변수가 달라지면)


★Review
만약, 90~100점 사이 점수의 학생들에게 A등급을 준다할 때

  var score = "(입력된 점수)"

  i)
  90 >= score >= 100 (거의 모든 언어에서 이렇게 실행안됨.)

  ii)
  score >= 90    score <= 100  (이렇게 작성이 되는데 사이에 뭘 넣어야 하냐)
    ||을 넣으면,
      80점이면 F T 여서 T
      120점이면 T F 여서 T
    &&을 넣으면,
      80점이면 F T 여서 F
      120점이면 T F 여서 F
      95점이면 T T 여서 T     ----> && 사용한다.